--SAURAV POKAHREL Assignment 4
--01
SELECT 
    to_char(avg(tuitionbalance), '9999.99') as balance, 
    state
FROM students
GROUP BY state
ORDER BY balance desc;

--02
SELECT 
    to_char(registrationdate, 'Mon') as REGMONTH, 
    COUNT(*) AS NumStudents
FROM REGISTRATION 
GROUP BY to_char(registrationdate, 'Mon') 
ORDER BY NumStudents;


--03
SELECT 
    B.BUILDINGNAME, 
    ROUND(AVG(S.CAPACITY), 3) AS Average, 
    MIN(S.CAPACITY) AS Lowest, 
    MAX(S.CAPACITY) AS Highest
FROM BUILDINGS B
JOIN LOCATIONS L ON B.BUILDING = L.BUILDING
JOIN SECTIONS S ON L.LOCATIONID = S.LOCATIONID
WHERE B.BUILDING LIKE 'M%' OR B.BUILDING LIKE 'S%'
GROUP BY B.BUILDINGNAME
ORDER BY B.BUILDINGNAME;

--04
SELECT 
    state, 
    count(*) as numstudents
FROM Students
HAVING count(*) >= 110 
GROUP BY state
ORDER BY numstudents desc;


--05
SELECT 
    COUNT(*) AS NumSections, 
    C.COURSEID, 
    C.SUBJECTCODE, 
    C.COURSENUMBER
FROM COURSES C
INNER JOIN SECTIONS S ON C.COURSEID = S.COURSEID
GROUP BY C.COURSEID, C.SUBJECTCODE, C.COURSENUMBER
HAVING COUNT(*) > 19
ORDER BY NumSections DESC, C.COURSEID;

--06
SELECT 
    COUNT(*) AS NumStudents, 
    P.FIRSTNAME, 
    P.LASTNAME
FROM PROFESSORS P
JOIN SECTIONS S ON P.PROFESSORID = S.PROFESSORID
JOIN REGISTRATION R ON S.SECTIONID = R.SECTIONID
GROUP BY P.FIRSTNAME, P.LASTNAME
HAVING COUNT(*) >= 60
ORDER BY NumStudents DESC, P.FIRSTNAME DESC;

--07
SELECT 
    COUNT(*) AS NumSections, 
    S.FIRSTNAME, 
    S.LASTNAME
FROM REGISTRATION R
JOIN STUDENTS S ON R.STUDENTID = S.STUDENTID
GROUP BY R.STUDENTID, S.FIRSTNAME, S.LASTNAME
HAVING COUNT(*) >= 19
ORDER BY NumSections DESC, S.LASTNAME, S.FIRSTNAME;

--08
SELECT 
    sec.courseID, 
    c.SubjectCode, 
    c.CourseNumber, 
    to_char(AVG(s.tuitionbalance),'9999.99') AS avgbal, 
    COUNT(*) AS numstudents
FROM Registration r
INNER JOIN students s ON r.studentID = s.studentID
INNER JOIN sections sec ON r.sectionID = sec.sectionID
INNER JOIN courses c ON c.courseID = sec.courseID
GROUP BY sec.courseID, c.SubjectCode, c.CourseNumber
HAVING AVG(s.tuitionbalance) > 5300 AND COUNT(*) >= 20
ORDER BY avgbal DESC, sec.courseID;

--09
SELECT 
    COUNT(S.SECTIONID) AS NumSections, 
    P.PROFESSORID, 
    P.FIRSTNAME, 
    P.LASTNAME, 
    To_char(P.HIREDATE, 'MON DD YYYY HH:MM AM') as datehired
FROM PROFESSORS P
JOIN SECTIONS S ON P.PROFESSORID = S.PROFESSORID
WHERE P.HIREDATE > TO_DATE('2018-01-01', 'YYYY-MM-DD HH24:MI:SS')
GROUP BY P.PROFESSORID, P.FIRSTNAME, P.LASTNAME, P.HIREDATE
HAVING COUNT(S.SECTIONID) >= 10
ORDER BY P.HIREDATE DESC, NumSections DESC;

--10
SELECT 
    P.PROFESSORID, 
    P.FIRSTNAME, 
    P.LASTNAME, 
    To_Char(AVG(S.CAPACITY), '99.99') AS Avgcap, 
    COUNT(S.SECTIONID) AS NumSections
FROM PROFESSORS P
JOIN SECTIONS S ON P.PROFESSORID = S.PROFESSORID
JOIN LOCATIONS L ON S.LOCATIONID = L.LOCATIONID
GROUP BY P.PROFESSORID, P.FIRSTNAME, P.LASTNAME
HAVING AVG(S.CAPACITY) > 35 AND COUNT(*) > 1
ORDER BY NumSections , Avgcap , P.LASTNAME, P.FIRSTNAME;